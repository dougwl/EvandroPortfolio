/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : 0\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n\n\n//# sourceURL=webpack://website/./node_modules/regenerator-runtime/runtime.js?");

/***/ }),

/***/ "./src/js/App/app.js":
/*!***************************!*\
  !*** ./src/js/App/app.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! regenerator-runtime/runtime */ \"./node_modules/regenerator-runtime/runtime.js\");\n/* harmony import */ var regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(regenerator_runtime_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _Custom_customizations__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Custom/customizations */ \"./src/js/Custom/customizations.js\");\n/* harmony import */ var _Custom_customizations__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_Custom_customizations__WEBPACK_IMPORTED_MODULE_1__);\n\n/* var jquery = require('../Libraries/jquery.min')\r\nvar $ = jquery;\r\nvar jQuery = jquery;\r\nwindow.$ = jquery;\r\nrequire('../Libraries/jquery.easing.min');\r\nrequire('../Libraries/bootstrap.min');\r\nrequire('../Libraries/bootstrap-datepicker.min');\r\nrequire('../Libraries/bootstrap-datepicker.pt-BR.min');\r\nrequire('../Libraries/flickity.pkgd.min');\r\nrequire('../Libraries/plyr.min'); */ /* require('../Custom/customizations.js'); */ \n\n\n//# sourceURL=webpack://website/./src/js/App/app.js?");

/***/ }),

/***/ "./src/js/Custom/customizations.js":
/*!*****************************************!*\
  !*** ./src/js/Custom/customizations.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _asyncToGenerator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n        throw new TypeError(\"Cannot call a class as a function\");\n    }\n}\nfunction _defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n    return Constructor;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = arguments[i] != null ? arguments[i] : {\n        };\n        var ownKeys = Object.keys(source);\n        if (typeof Object.getOwnPropertySymbols === \"function\") {\n            ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {\n                return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n            }));\n        }\n        ownKeys.forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        });\n    }\n    return target;\n}\nvar regeneratorRuntime = __webpack_require__(/*! regenerator-runtime */ \"./node_modules/regenerator-runtime/runtime.js\");\n//Some new tests\nvar FieldValidation = function() {\n    \"use strict\";\n    function FieldValidation() {\n        _classCallCheck(this, FieldValidation);\n        this.fieldsList = {\n        };\n        this.lastInFocus = '';\n        this.displayingTooltip = false;\n        this.dismissed = ''; // Indicates when pop up is dismissed.\n    }\n    _createClass(FieldValidation, [\n        {\n            /*     'use strict'; */ key: \"CheckOn\",\n            value: function CheckOn(event, nodeObj, message, param) {\n                var timeOut = param === void 0 ? 530 : param;\n                var name = nodeObj.name;\n                var t = timeOut;\n                var msg = message;\n                var instance = this;\n                var ClosePopUp = function() {\n                    if (document.activeElement.getAttribute('name') == name) {\n                        nodeObj.blur();\n                        nodeObj.focus();\n                    }\n                };\n                var SetTimer = (function(time) {\n                    var tt = time != undefined ? time : t;\n                    this.fieldsList[name].status = 'on';\n                    this.fieldsList[name].controller = setTimeout((function() {\n                        this.IsValid(name, msg);\n                    }).bind(this), tt);\n                }).bind(this);\n                var CloseOnOutOfFocus = function() {\n                    var events = [\n                        'scroll',\n                        'click'\n                    ];\n                    var removeAfterUsed = function(evt) {\n                        if (evt.type == 'scroll' || evt.type == 'click') {\n                            if (name == instance.lastInFocus && instance.fieldsList[name].status == 'off') {\n                                nodeObj.blur();\n                                if (evt.target.tagName == 'BUTTON') {\n                                    evt.preventDefault();\n                                    evt.target.click();\n                                }\n                            } else instance.StopThis(name);\n                            instance.dismissed = true;\n                            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                            try {\n                                for(var _iterator = events[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                                    var ev = _step.value;\n                                    document.removeEventListener(ev, removeAfterUsed, true);\n                                }\n                            } catch (err) {\n                                _didIteratorError = true;\n                                _iteratorError = err;\n                            } finally{\n                                try {\n                                    if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                        _iterator.return();\n                                    }\n                                } finally{\n                                    if (_didIteratorError) {\n                                        throw _iteratorError;\n                                    }\n                                }\n                            }\n                        }\n                    };\n                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                    try {\n                        for(var _iterator = events[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                            var event1 = _step.value;\n                            document.addEventListener(event1, removeAfterUsed, true);\n                        }\n                    } catch (err) {\n                        _didIteratorError = true;\n                        _iteratorError = err;\n                    } finally{\n                        try {\n                            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                _iterator.return();\n                            }\n                        } finally{\n                            if (_didIteratorError) {\n                                throw _iteratorError;\n                            }\n                        }\n                    }\n                };\n                this.lastInFocus = name;\n                this.displayingTooltip = false;\n                if (!(name in this.fieldsList)) {\n                    var newField = _defineProperty({\n                    }, name, {\n                        obj: nodeObj,\n                        msg: '',\n                        controller: null,\n                        status: 'off'\n                    });\n                    this.fieldsList = _objectSpread({\n                    }, this.fieldsList, newField);\n                    if (nodeObj.value != '') SetTimer();\n                } else if (event.type == 'input' && event.inputType == 'deleteContentBackward') {\n                    if (nodeObj.value != '') {\n                        if (this.fieldsList[name].status == 'on') {\n                            this.StopThis(name);\n                        } else ClosePopUp();\n                        SetTimer(720);\n                    } else {\n                        if (this.fieldsList[name].status == 'off') ClosePopUp();\n                        this.fieldsList[name].obj.removeAttribute('isvalid');\n                    }\n                } else if (this.fieldsList[name].status == 'off' && nodeObj.value != '') {\n                    ClosePopUp();\n                    SetTimer();\n                } else if (nodeObj.value != '') {\n                    this.StopThis(name);\n                    SetTimer();\n                }\n                if (this.dismissed == '' || this.dismissed == true) {\n                    CloseOnOutOfFocus();\n                    this.dismissed = false;\n                }\n                this.fieldsList[name].obj.setCustomValidity('');\n                this.fieldsList[name].obj.setAttribute('isvalid', true);\n            }\n        },\n        {\n            /* 'use strict'; */ key: \"StopAll\",\n            value: function StopAll() {\n                var controller;\n                var fieldName;\n                for(var field in this.fieldsList){\n                    fieldName = field.name;\n                    if (fieldName in this.fieldsList) {\n                        if (this.fieldsList[fieldName].controller != null) {\n                            clearTimeout(this.fieldsList[fieldName].controller);\n                            this.fieldsList[fieldName].controller = null;\n                            this.fieldsList[fieldName].status = 'off';\n                        }\n                    }\n                }\n            }\n        },\n        {\n            /* 'use strict'; */ key: \"StopThis\",\n            value: function StopThis(obj) {\n                if (obj in this.fieldsList && this.fieldsList[obj].controller != null) {\n                    clearTimeout(this.fieldsList[obj].controller);\n                    this.fieldsList[obj].controller = null;\n                    this.fieldsList[obj].status = 'off';\n                }\n            }\n        },\n        {\n            /* 'use strict'; */ key: \"IsValid\",\n            value: function IsValid(objName, message) {\n                var field = this.fieldsList[objName];\n                var isInViewport = function(elem) {\n                    var bounding = elem.getBoundingClientRect();\n                    return bounding.top >= 0 && bounding.left >= 0 && bounding.bottom <= (window.innerHeight || document.documentElement.clientHeight) && bounding.right <= (window.innerWidth || document.documentElement.clientWidth);\n                };\n                if (field.obj.value != '' && field.obj.checkValidity() == false) {\n                    if (field.msg == '') {\n                        field.msg = message;\n                        field.obj.setCustomValidity(message);\n                    }\n                    if (document.activeElement.name == objName || document.activeElement.tagName == 'BODY' && this.lastInFocus == objName) {\n                        if (isInViewport(field.obj) && field.obj.value != '') {\n                            field.obj.reportValidity();\n                        }\n                        this.displayingTooltip = true;\n                    }\n                    field.controller = null;\n                    field.status = 'off';\n                    field.msg = '';\n                    field.obj.setAttribute('isvalid', false);\n                } else if (field.obj.value == '') {\n                    field.controller = null;\n                    field.status = 'off';\n                    field.msg = '';\n                }\n            }\n        },\n        {\n            /* 'use strict'; */ key: \"ListenToField\",\n            value: function ListenToField(param) {\n                var ref = param === void 0 ? {\n                } : param, nodeList = ref.nodeList, _type = ref.type, type = _type === void 0 ? '' : _type, _customMessage = ref.customMessage, customMessage = _customMessage === void 0 ? '' : _customMessage, _tooltipTime = ref.tooltipTime, tooltipTime = _tooltipTime === void 0 ? '' : _tooltipTime;\n                var inputHandler;\n                var assignToEvents = (function(element) {\n                    var message = customMessage;\n                    if (element.type == type || type == '') {\n                        if (element.tagName == 'INPUT' && element.type != 'hidden' && !element.id.includes('botcheck')) {\n                            if (message == '') {\n                                if (element.hasAttribute('tooltip')) {\n                                    message = element.getAttribute('tooltip');\n                                } else console.warn('No message defined, using default tooltip.');\n                            }\n                            if (!element.hasAttribute('inputType')) {\n                                element.addEventListener('input', (function(evt) {\n                                    this.CheckOn(evt, element, message, tooltipTime != '' ? tooltipTime : undefined);\n                                }).bind(this));\n                            } else if (element.getAttribute('inputType') == 'calendar') {\n                                element.addEventListener('blur', (function(evt) {\n                                    this.CheckOn(evt, element, message, tooltipTime != '' ? tooltipTime : undefined);\n                                }).bind(this));\n                            }\n                            element.form.addEventListener('submit', function(ev) {\n                                if (element.value == '') {\n                                    element.setAttribute('required', '');\n                                    element.setCustomValidity('Este campo é obrigatório!');\n                                    ev.stopPropagation();\n                                    ev.preventDefault();\n                                    element.reportValidity();\n                                }\n                            });\n                        }\n                    } else {\n                        throw console.error(\"Type is invalid.\");\n                        return;\n                    }\n                }).bind(this);\n                if (nodeList != undefined || nodeList != null) {\n                    inputHandler = nodeList;\n                } else {\n                    throw console.error('Node list is empty!');\n                    return;\n                }\n                if (inputHandler instanceof NodeList && inputHandler.length > 0) {\n                    var mismatchCount = 0;\n                    for(var field in inputHandler){\n                        if (inputHandler.hasOwnProperty(field)) {\n                            var element = inputHandler[field];\n                            if (element.tagName == 'INPUT') assignToEvents(element);\n                            else mismatchCount += 1;\n                        }\n                    }\n                    if (mismatchCount == inputHandler.length) {\n                        throw console.warn(\"No inputs found!\");\n                    }\n                } else if (inputHandler.tagName == 'INPUT') assignToEvents(inputHandler);\n                else {\n                    throw console.warn(\"No inputs found!\");\n                }\n            }\n        }\n    ]);\n    return FieldValidation;\n}();\n// Input masking using array with string format saved, and compare chars per index.\nvar CustomPlaceHolder = function() {\n    \"use strict\";\n    function CustomPlaceHolder(param) {\n        var _Default = param.Default, Default = _Default === void 0 ? '' : _Default, _Custom = param.Custom, Custom = _Custom === void 0 ? '' : _Custom, _Target = param.Target, Target = _Target === void 0 ? undefined : _Target, _StartWithDefault = param.StartWithDefault, StartWithDefault = _StartWithDefault === void 0 ? true : _StartWithDefault;\n        _classCallCheck(this, CustomPlaceHolder);\n        this.DefaultHolder = Default;\n        this.NewHolder = Custom;\n        this.Node = Target;\n        if (StartWithDefault == true) this.Node.placeholder = this.DefaultHolder;\n    }\n    _createClass(CustomPlaceHolder, [\n        {\n            key: \"OnFocus\",\n            value: function OnFocus(param) {\n                var _ReturnToDefault = param.ReturnToDefault, ReturnToDefault = _ReturnToDefault === void 0 ? true : _ReturnToDefault, _CustomColor = param.CustomColor, CustomColor = _CustomColor === void 0 ? '' : _CustomColor;\n                var defaultColor;\n                this.Node.onfocus = (function() {\n                    this.Node.placeholder = this.NewHolder;\n                }).bind(this);\n                if (ReturnToDefault == true) {\n                    this.Node.onblur = (function() {\n                        this.Node.placeholder = this.DefaultHolder;\n                    }).bind(this);\n                }\n            }\n        }\n    ]);\n    return CustomPlaceHolder;\n}();\nvar VideoController = function() {\n    \"use strict\";\n    function VideoController(playersList) {\n        _classCallCheck(this, VideoController);\n        this.players = playersList;\n        this.loadIsComplete = false;\n    }\n    _createClass(VideoController, [\n        {\n            key: \"HasLoaded\",\n            value: function HasLoaded(code) {\n                var onInstanceCreated = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {\n                    var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, player;\n                    return regeneratorRuntime.wrap(function _callee$(_ctx) {\n                        while(1)switch(_ctx.prev = _ctx.next){\n                            case 0:\n                                if (this.loadIsComplete) {\n                                    _ctx.next = 28;\n                                    break;\n                                }\n                                _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                                _ctx.prev = 2;\n                                _iterator = this.players[Symbol.iterator]();\n                            case 4:\n                                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                                    _ctx.next = 13;\n                                    break;\n                                }\n                                player = _step.value;\n                                if (!(player.elements.controls === undefined)) {\n                                    _ctx.next = 10;\n                                    break;\n                                }\n                                _ctx.next = 9;\n                                return setTimeout(function() {\n                                    return onInstanceCreated();\n                                }, 0.1);\n                            case 9:\n                                return _ctx.abrupt(\"return\", _ctx.sent);\n                            case 10:\n                                _iteratorNormalCompletion = true;\n                                _ctx.next = 4;\n                                break;\n                            case 13:\n                                _ctx.next = 19;\n                                break;\n                            case 15:\n                                _ctx.prev = 15;\n                                _ctx.t0 = _ctx[\"catch\"](2);\n                                _didIteratorError = true;\n                                _iteratorError = _ctx.t0;\n                            case 19:\n                                _ctx.prev = 19;\n                                _ctx.prev = 20;\n                                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                    _iterator.return();\n                                }\n                            case 22:\n                                _ctx.prev = 22;\n                                if (!_didIteratorError) {\n                                    _ctx.next = 25;\n                                    break;\n                                }\n                                throw _iteratorError;\n                            case 25:\n                                return _ctx.finish(22);\n                            case 26:\n                                return _ctx.finish(19);\n                            case 27:\n                                /* console.log('but setting to true'); */ this.loadIsComplete = true;\n                            case 28:\n                                code();\n                            case 29:\n                            case \"end\":\n                                return _ctx.stop();\n                        }\n                    }, _callee, this, [\n                        [\n                            20,\n                            ,\n                            22,\n                            26\n                        ],\n                        [\n                            2,\n                            15,\n                            19,\n                            27\n                        ]\n                    ]);\n                }).bind(this)).bind(this);\n                onInstanceCreated();\n            }\n        },\n        {\n            key: \"ExecuteOnAllPlayers\",\n            value: function ExecuteOnAllPlayers(method) {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.players[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var player = _step.value;\n                        method(player);\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n        },\n        {\n            key: \"PauseAll\",\n            value: function PauseAll() {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.players[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var player = _step.value;\n                        if (player.playing) {\n                            player.pause();\n                            return;\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n        },\n        {\n            key: \"StopAll\",\n            value: function StopAll() {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.players[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var player = _step.value;\n                        if (player.paused || player.playing) {\n                            player.stop();\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n        },\n        {\n            key: \"HideAllControls\",\n            value: function HideAllControls() {\n                this.HasLoaded((function() {\n                    console.log('executing code');\n                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                    try {\n                        for(var _iterator = this.players[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                            var player = _step.value;\n                            player.elements.controls.hidden = true;\n                        }\n                    } catch (err) {\n                        _didIteratorError = true;\n                        _iteratorError = err;\n                    } finally{\n                        try {\n                            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                _iterator.return();\n                            }\n                        } finally{\n                            if (_didIteratorError) {\n                                throw _iteratorError;\n                            }\n                        }\n                    }\n                }).bind(this));\n            }\n        },\n        {\n            key: \"ShowAllControls\",\n            value: function ShowAllControls() {\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.players[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var player = _step.value;\n                        player.elements.controls.hidden = false;\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n        },\n        {\n            key: \"DisablePlayOnClick\",\n            value: function DisablePlayOnClick(toggle, param) {\n                var param1 = param === void 0 ? {\n                    all: true,\n                    player: null\n                } : param;\n                if (param1.all && !(param1.player != null)) {\n                    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                    try {\n                        for(var _iterator = this.players[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                            var pl = _step.value;\n                            pl.config.clickToPlay = !toggle;\n                            console.log(pl);\n                        }\n                    } catch (err) {\n                        _didIteratorError = true;\n                        _iteratorError = err;\n                    } finally{\n                        try {\n                            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                _iterator.return();\n                            }\n                        } finally{\n                            if (_didIteratorError) {\n                                throw _iteratorError;\n                            }\n                        }\n                    }\n                } else if (param1.player != null) {\n                    param1.player.config.clickToPlay = !toggle;\n                }\n            }\n        }\n    ]);\n    return VideoController;\n}();\nvar ScrollObserver = function() {\n    \"use strict\";\n    function ScrollObserver(param) {\n        var ref = param === void 0 ? {\n            observerOptions: undefined,\n            customCallback: undefined\n        } : param, observerOptions = ref.observerOptions, customCallback = ref.customCallback;\n        _classCallCheck(this, ScrollObserver);\n        _defineProperty(this, \"_defaultOptions\", function(steps) {\n            return Array(steps + 1).fill(0).map(function(_, index) {\n                return index / steps;\n            });\n        });\n        this.Options = this._defaultOptions;\n        this.Callback = (function(v) {\n            this._defaultCallback(v);\n        }).bind(this);\n        this.State = {\n            ascending: false,\n            descending: false\n        };\n        this.OnScrollMove = function(val) {\n            return new CustomEvent('OnScrollMove', {\n                detail: {\n                    Up: val === 'Up' ? true : false,\n                    Down: val === 'Down' ? true : false\n                }\n            });\n        };\n        this.Initialized = false;\n        this.TopPosition = {\n            current: 0,\n            previous: 0,\n            direction: ''\n        };\n        this._numberOfSignedEvents = 0;\n        this.Observer = new IntersectionObserver(this.Callback, {\n            threshold: this.Options(10)\n        });\n        var _container = document.createDocumentFragment().appendChild(document.createElement('div'));\n        _container.setAttribute('id', 'scrollMarkerContainer');\n        Object.assign(_container.style, {\n            position: 'absolute',\n            top: 0\n        });\n        var gapBetweenMarkers = 1;\n        var areaAvailable = document.documentElement.scrollHeight - document.documentElement.clientHeight - window.innerHeight;\n        var numberOfMarkers = Math.round(areaAvailable / (window.innerHeight - gapBetweenMarkers));\n        var markersHeight = areaAvailable / numberOfMarkers;\n        var rest = numberOfMarkers * (markersHeight + gapBetweenMarkers) - areaAvailable;\n        var _markers = [];\n        var position = window.innerHeight;\n        for(var index = 0; index < numberOfMarkers; index++){\n            _markers.push(_container.appendChild(document.createElement('div')));\n            _markers[index].setAttribute('id', \"scrollMarker\".concat(index));\n            if (index != 0) position = position + markersHeight + gapBetweenMarkers;\n            if (index == numberOfMarkers - 1) markersHeight += rest * -1;\n            Object.assign(_markers[index].style, {\n                'position': 'absolute',\n                'height': \"\".concat(markersHeight, \"px\"),\n                'width': '1px',\n                'top': \"\".concat(position, \"px\"),\n                'z-index': '999'\n            });\n            this.Observer.observe(_markers[index]);\n        }\n        this.scrollMarker = {\n            container: _container,\n            markers: _markers\n        };\n        document.body.appendChild(this.scrollMarker.container);\n        ScrollObserver.ActiveObservers.push(this);\n    }\n    _createClass(ScrollObserver, [\n        {\n            /**\r\n     * \r\n     * @param {IntersectionObserverEntry[]} entries \r\n     */ key: \"_defaultCallback\",\n            value: function _defaultCallback(entries) {\n                if (this.Initialized) {\n                    if (this._numberOfSignedEvents < 1) return console.error('No signed event listeners');\n                    this.TopPosition.current = window.scrollY;\n                    if (this.TopPosition.current > this.TopPosition.previous || this.TopPosition.current === this.TopPosition.previous && this.TopPosition.direction === 'Down') {\n                        this.State = {\n                            'descending': true,\n                            'ascending': false\n                        };\n                        this.scrollMarker.container.dispatchEvent(this.OnScrollMove('Down'));\n                        this.TopPosition.direction = 'Down';\n                    } else if (this.TopPosition.current < this.TopPosition.previous || this.TopPosition.current === this.TopPosition.previous && this.TopPosition.direction === 'Up') {\n                        this.State = {\n                            'descending': false,\n                            'ascending': true\n                        };\n                        this.scrollMarker.container.dispatchEvent(this.OnScrollMove('Up'));\n                        this.TopPosition.direction = 'Up';\n                    }\n                    this.TopPosition.previous = this.TopPosition.current;\n                } else {\n                    this.Initialized = true;\n                }\n            }\n        },\n        {\n            key: \"On\",\n            value: function On(param, param1) {\n                var event = param === void 0 ? '' : param, callBack = param1 === void 0 ? undefined : param1;\n                if (callBack !== undefined) {\n                    if (event === 'OnScrollMove') {\n                        this.scrollMarker.container.addEventListener('OnScrollMove', callBack);\n                        this._numberOfSignedEvents += 1;\n                    } else if (event === 'OnIntersectionEnter') {\n                        this.scrollMarker.container.addEventListener('OnIntersectionEnter', callBack);\n                        this._numberOfSignedEvents += 1;\n                    } else if (event === 'OnIntersectionLeave') {\n                        this.scrollMarker.container.addEventListener('OnIntersectionLeave', callBack);\n                        this._numberOfSignedEvents += 1;\n                    } else {\n                        return console.error(\"Event not supported\");\n                    }\n                } else console.error('Callback is undefined.');\n            }\n        },\n        {\n            key: \"Off\",\n            value: function Off(param, param1) {\n                var event = param === void 0 ? '' : param, callBack = param1 === void 0 ? undefined : param1;\n                if (callBack !== undefined && this._numberOfSignedEvents > 0) {\n                    if (event === 'OnScrollMove') {\n                        this.scrollMarker.container.removeEventListener('OnScrollMove', callBack);\n                        this._numberOfSignedEvents -= 1;\n                    } else if (event === 'OnIntersectionEnter') {\n                        this.scrollMarker.container.removeEventListener('OnIntersectionEnter', callBack);\n                        this._numberOfSignedEvents -= 1;\n                    } else if (event === 'OnIntersectionLeave') {\n                        this.scrollMarker.container.removeEventListener('OnIntersectionLeave', callBack);\n                        this._numberOfSignedEvents -= 1;\n                    } else {\n                        return console.error(\"Only event supported is OnScrollMove\");\n                    }\n                } else console.error('Callback is undefined.');\n            }\n        }\n    ]);\n    return ScrollObserver;\n}();\n_defineProperty(ScrollObserver, \"ActiveObservers\", []);\nvar Sort = function() {\n    \"use strict\";\n    function Sort() {\n        _classCallCheck(this, Sort);\n    }\n    _createClass(Sort, null, [\n        {\n            key: \"quickSort\",\n            value: function quickSort(originalArray) {\n                if (originalArray.length <= 1) {\n                    return originalArray;\n                } else {\n                    var leftSide = [];\n                    var rightSide = [];\n                    var newArray = [];\n                    var pivot = originalArray.pop();\n                    var length = originalArray.length;\n                    for(var i = 0; i < length; i++){\n                        if (originalArray[i] <= pivot) {\n                            leftSide.push(originalArray[i]);\n                        } else {\n                            rightSide.push(originalArray[i]);\n                        }\n                    } //END FOR   \n                    return newArray.concat(Sort.quickSort(leftSide), pivot, Sort.quickSort(rightSide));\n                } //END ELSE\n            }\n        }\n    ]);\n    return Sort;\n}();\nvar WatchScrollPosition = function() {\n    \"use strict\";\n    function WatchScrollPosition() {\n        _classCallCheck(this, WatchScrollPosition);\n        this.Positions = [];\n        this.Nodes = {\n        };\n        this.ScrollObserver = undefined;\n        this.Subscribers = {\n        };\n        this._lastPosition = undefined;\n        this._positionOffset = 180;\n    }\n    _createClass(WatchScrollPosition, [\n        {\n            key: \"GetElements\",\n            value: function GetElements(param) {\n                var tmp = param.Tags, Tags = tmp === void 0 ? [] : tmp, tmp1 = param.ExcludedIDs, ExcludedIDs = tmp1 === void 0 ? [] : tmp1;\n                var elements = new Object;\n                var nodes, exclude, index = 0;\n                if (!Array.isArray(Tags)) Tags = [\n                    Tags\n                ];\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    var _this = this, _loop = function(_iterator, _step) {\n                        var tag = _step.value;\n                        nodes = document.querySelectorAll(tag);\n                        if (ExcludedIDs.length > 0) {\n                            ExcludedIDs = ExcludedIDs.filter(function(val) {\n                                nodes = Array.from(nodes).filter(function(node) {\n                                    return node.id == val ? !(exclude = true) : !(exclude = false);\n                                });\n                                return !exclude;\n                            });\n                            elements[tag] = nodes;\n                        } else {\n                            elements[tag] = Array.from(nodes);\n                        }\n                        elements[tag].map((function(node) {\n                            _this.Nodes[node.getBoundingClientRect().top + window.pageYOffset - _this._positionOffset] = node.id ? node.id : \"node \".concat(index);\n                        }).bind(_this));\n                        _this.Positions = Object.keys(_this.Nodes).map(function(val) {\n                            return parseFloat(val);\n                        });\n                        index++;\n                    };\n                    for(var _iterator = Tags[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop(_iterator, _step);\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n        },\n        {\n            key: \"Watch\",\n            value: function Watch(param) {\n                var tmp = param.State, State = tmp === void 0 ? true : tmp, tmp1 = param.Callback, Callback = tmp1 === void 0 ? undefined : tmp1, tmp2 = param.scrollObserver, scrollObserver = tmp2 === void 0 ? undefined : tmp2;\n                if (State) {\n                    if (Callback !== undefined) this.Subscribers[Callback.name] = Callback;\n                    else return console.error('No callback');\n                    if (scrollObserver === undefined) {\n                        if (this.ScrollObserver === undefined) {\n                            if (ScrollObserver.ActiveObservers.length > 0) {\n                                this.ScrollObserver = ScrollObserver.ActiveObservers[0];\n                            } else {\n                                this.ScrollObserver = new ScrollObserver();\n                            }\n                        }\n                    } else if (this.ScrollObserver === undefined) {\n                        this.ScrollObserver = ScrollObserver;\n                    }\n                    this.ScrollObserver.On('OnScrollMove', (function() {\n                        for(var i = 0; i < this.Positions.length; i++){\n                            var position = this.Positions[i];\n                            if (window.pageYOffset >= position && !(window.pageYOffset >= this.Positions[i + 1]) && position != this._lastPosition) {\n                                this._lastPosition = position;\n                                if (Callback !== undefined) {\n                                    for(var subscriber in this.Subscribers){\n                                        this.Subscribers[subscriber](position, this.Nodes);\n                                    }\n                                    break;\n                                }\n                            }\n                        }\n                    }).bind(this));\n                } else {\n                    for(var method in this.Subscribers){\n                        if (method == Callback.name) {\n                            delete this.Subscribers[method];\n                            return;\n                        }\n                    }\n                }\n            }\n        },\n        {\n            key: \"CurrentSection\",\n            value: function CurrentSection() {\n                var windowPosition = window.pageYOffset;\n                for(var i = 0; i < this.Positions.length; i++){\n                    var sectionPosition = this.Positions[i];\n                    if (windowPosition >= sectionPosition && !(windowPosition >= this.Positions[i + 1])) {\n                        return this.Nodes[this.Positions[i]];\n                    } else if (windowPosition < this.Positions[0]) {\n                        return this.Nodes[this.Positions[0]];\n                    }\n                }\n            }\n        }\n    ]);\n    return WatchScrollPosition;\n}();\nvar ActiveMenuLink = function() {\n    \"use strict\";\n    function ActiveMenuLink() {\n        _classCallCheck(this, ActiveMenuLink);\n        this.ActiveButton = undefined;\n        this.NewButton = undefined;\n    }\n    _createClass(ActiveMenuLink, [\n        {\n            key: \"ScrollingIntoView\",\n            value: function ScrollingIntoView(state) {\n                ActiveMenuLink.ScrollIntoView = state;\n            }\n        },\n        {\n            key: \"Change\",\n            value: function Change(param) {\n                var _SectionID = param.SectionID, SectionID = _SectionID === void 0 ? undefined : _SectionID;\n                return _asyncToGenerator(regeneratorRuntime.mark(function _callee() {\n                    return regeneratorRuntime.wrap(function _callee$(_ctx) {\n                        while(1)switch(_ctx.prev = _ctx.next){\n                            case 0:\n                                if (ActiveMenuLink.ScrollIntoView) {\n                                    _ctx.next = 8;\n                                    break;\n                                }\n                                if (this.ActiveButton == undefined) this.ActiveButton = document.querySelector('.current');\n                                this.NewButton = document.querySelector(SectionID[0] == '#' ? \"\".concat(SectionID, \"--button\") : \"#\".concat(SectionID, \"--button\"));\n                                if (!(this.NewButton != undefined)) {\n                                    _ctx.next = 7;\n                                    break;\n                                }\n                                {\n                                    if (this.ActiveButton.id != this.NewButton.id) {\n                                        this.ActiveButton.classList.remove(\"current\");\n                                        this.ActiveButton = this.NewButton.parentElement;\n                                        this.ActiveButton.classList.add(\"current\");\n                                    }\n                                }\n                                _ctx.next = 8;\n                                break;\n                            case 7:\n                                return _ctx.abrupt(\"return\", new console.error(\"Can't find node with specified ID\"));\n                            case 8:\n                            case \"end\":\n                                return _ctx.stop();\n                        }\n                    }, _callee, this);\n                }).bind(this))();\n            }\n        }\n    ]);\n    return ActiveMenuLink;\n}();\n_defineProperty(ActiveMenuLink, \"ScrollIntoView\", false);\nfunction debounce(func, wait, immediate) {\n    var timeout;\n    return function() {\n        var context = this, args = arguments;\n        clearTimeout(timeout);\n        timeout = setTimeout(function() {\n            timeout = null;\n            if (!immediate) func.apply(context, args);\n        }, wait);\n        if (immediate && !timeout) func.apply(context, args);\n    };\n}\nvar innerVisualHeight = function() {\n    var vh = window.innerHeight * 0.01;\n    document.documentElement.style.setProperty('--vh', \"\".concat(vh, \"px\"));\n};\n/* window.addEventListener('resize', debounce(innerVisualHeight, 150)); */ document.addEventListener('DOMContentLoaded', innerVisualHeight);\nvar ActiveMenu = new ActiveMenuLink();\nvar HideNavbar = new ScrollObserver();\nvar Navbar = document.querySelector('#header-wrap');\nHideNavbar.On('OnScrollMove', function(val) {\n    if (val.detail.Up) {\n        Navbar.style = \"opacity: 1;\";\n    } else {\n        Navbar.style = \"opacity: 0;\";\n    }\n});\n/* Instead of only hiding the navbar when the sticky-header class is enabled, it hides in any scroll down. \r\nIn this new version, the opacity is set to 0.*/ var ActiveSection = new WatchScrollPosition();\nActiveSection.GetElements({\n    Tags: 'section',\n    ExcludedIDs: [\n        'content',\n        'slider'\n    ]\n});\nActiveSection.Watch({\n    State: true,\n    Callback: function(pos, arr) {\n        ActiveMenu.Change({\n            SectionID: arr[pos]\n        });\n    }\n});\nActiveMenu.Change({\n    SectionID: ActiveSection.CurrentSection()\n});\nvar ScrollIntoView = _asyncToGenerator(regeneratorRuntime.mark(function _callee(param) {\n    var element = param === void 0 ? undefined : param;\n    var node;\n    return regeneratorRuntime.wrap(function _callee$(_ctx) {\n        while(1)switch(_ctx.prev = _ctx.next){\n            case 0:\n                if (element != undefined) {\n                    ActiveMenu.Change({\n                        SectionID: element\n                    });\n                    ActiveMenu.ScrollingIntoView(true);\n                    ActiveSection.Watch({\n                        State: true,\n                        Callback: function Unsubscribe(pos, arr) {\n                            if (\"#\".concat(arr[pos]) == element) {\n                                ActiveSection.Watch({\n                                    State: false,\n                                    Callback: Unsubscribe\n                                });\n                                ActiveMenu.ScrollingIntoView(false);\n                            }\n                        }\n                    });\n                    node = document.querySelector(element == '#home' ? '#header' : element);\n                    try {\n                        node.scrollIntoView({\n                            behavior: 'smooth',\n                            alignToTop: 'false'\n                        });\n                    } catch (error) {\n                        window.scrollIntoView(node, {\n                            behavior: 'smooth',\n                            block: 'end',\n                            inline: 'nearest'\n                        });\n                    }\n                }\n            case 1:\n            case \"end\":\n                return _ctx.stop();\n        }\n    }, _callee);\n}));\nvar menuButtons = document.querySelectorAll('.menu-container li>a');\nvar registerButtons = function(buttons) {\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        var _loop = function(_iterator, _step) {\n            var button = _step.value;\n            var sectionId = \"#\".concat(button.id.split(\"--\")[0]);\n            button.addEventListener('click', function() {\n                ScrollIntoView(sectionId);\n            });\n        };\n        for(var _iterator = buttons[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop(_iterator, _step);\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n};\nregisterButtons(menuButtons);\nvar callToActionButton = document.querySelector('#home .home-button');\ncallToActionButton.addEventListener('click', function() {\n    var node = document.querySelector('.perfil-detalhes--link-wrapper');\n    try {\n        node.scrollIntoView({\n            behavior: \"smooth\",\n            block: \"start\"\n        });\n    } catch (error) {\n        window.scrollIntoView(node, {\n            behavior: \"smooth\",\n            block: \"start\"\n        });\n    }\n});\n/* fitty('#video-section-play-title', {multiline:true}); */ /* fitty('#video-section-description-parent'); */ // Add the attribute search-active to the search bar panel and control when it's true or not.\n/* ScrollReveal().reveal(document.querySelectorAll('.mainpage-experience-block-elements img')); */ var OverlayCarousel = function() {\n    var carousel = new Flickity(document.querySelector(\".video-carousel\"), {\n        wrapAround: true,\n        contain: true,\n        cellAlign: 'left'\n    });\n    var selectedSlide = carousel.selectedElement;\n    return {\n        instance: carousel,\n        currentSlide: selectedSlide,\n        startTransition: function startTransition(code) {\n            var previousCanvas = this.currentSlide.firstElementChild;\n            var newCanvas = this.instance.selectedElement.firstElementChild;\n            if (!newCanvas.classList.contains(\"video-carousel--fade-complete\")) {\n                newCanvas.classList.add(\"video-carousel--fade-complete\");\n                if (code !== undefined) {\n                    var pauseWhenTransitioned = (function() {\n                        code();\n                        this.instance.selectedElement.removeEventListener(\"transitionend\", pauseWhenTransitioned);\n                    }).bind(this);\n                    this.instance.selectedElement.addEventListener('transitionend', pauseWhenTransitioned);\n                }\n            }\n            if (newCanvas != previousCanvas) {\n                previousCanvas.classList.remove(\"video-carousel--fade-complete\");\n                this.currentSlide = this.instance.selectedElement;\n            }\n        },\n        resetTransitions: function resetTransitions() {\n            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n            try {\n                for(var _iterator = this.instance.cells[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                    var cell = _step.value;\n                    var canvas = cell.element.firstElementChild;\n                    if (canvas.classList.contains(\"video-carousel--fade-complete\")) {\n                        canvas.classList.remove(\"video-carousel--fade-complete\");\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally{\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return != null) {\n                        _iterator.return();\n                    }\n                } finally{\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n        }\n    };\n}();\nvar playerController;\nfunction LoadIframes() {\n    var iframeSpots = document.querySelectorAll(\".video-player\");\n    var iframeModel = document.createElement(\"iframe\");\n    iframeModel.allowFullscreen = true;\n    iframeModel.setAttribute(\"allowtransparency\", true);\n    iframeModel.allow = \"autoplay\";\n    var baseURL = \"https://www.youtube.com/embed/\";\n    playerController = new VideoController(new Array());\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = iframeSpots[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var node = _step.value;\n            var clone = iframeModel.cloneNode();\n            clone.src = baseURL + node.getAttribute('js-data');\n            node.appendChild(clone);\n            var player = new Plyr(node);\n            /*    let pauseOverlay = document.createElement(\"div\");\r\n        pauseOverlay.className = \"obscure-on-pause\";\r\n        player.elements.container.appendChild(pauseOverlay); */ playerController.players.push(player);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n}\n/* document.body.addEventListener('load', LoadIframes()); */ var EnableOverlay = new function() {\n    var videoSection = document.querySelector(\"#video-section-play-title\"); /* Make this whole function as a class and remove this query, by searching the children directly. */ \n    var playButton = videoSection.querySelector('.play-video');\n    var overlay = videoSection.querySelector('.video-overlay');\n    var carouselButtons = document.querySelectorAll(\".flickity-button\");\n    var videoDescriptions = document.querySelector(\".video-overlay--descriptions\").children;\n    var videoCarousel = document.querySelector(\".video-carousel\");\n    playButton.addEventListener('click', function() {\n        var enableOverlay = function enableOverlay(isActive) {\n            document.querySelector(\"body\").style = isActive ? \"overflow:hidden;\" : \"overflow:visible\";\n            return isActive;\n        };\n        var changeActiveDescription = function changeActiveDescription(index) {\n            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n            try {\n                for(var _iterator = videoDescriptions[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                    var el = _step.value;\n                    el.classList.remove(\"--active-video\");\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally{\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return != null) {\n                        _iterator.return();\n                    }\n                } finally{\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n            videoDescriptions[index].classList.add(\"--active-video\");\n        };\n        if (playerController === undefined) {\n            LoadIframes();\n        }\n        OverlayCarousel.resetTransitions();\n        OverlayCarousel.instance.on('change', function() {\n            playerController.HideAllControls();\n            OverlayCarousel.startTransition(function() {\n                playerController.PauseAll();\n                playerController.StopAll();\n            });\n            changeActiveDescription(OverlayCarousel.instance.selectedIndex);\n        });\n        changeActiveDescription(OverlayCarousel.instance.selectedIndex);\n        OverlayCarousel.startTransition();\n        var stopOnEnd = function(ev) {\n            ev.detail.plyr.stop();\n        };\n        var executeOnPlay = function() {\n            playerController.ShowAllControls();\n            var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n            try {\n                var _loop = function(_iterator, _step) {\n                    var button = _step.value;\n                    var hideButton = function() {\n                        return button.classList.add(\"flickity-button--hidden\");\n                    };\n                    var showButton = function() {\n                        button.classList.remove(\"flickity-button--hidden\");\n                        playerController.ExecuteOnAllPlayers(function(player) {\n                            return player.elements.container.removeEventListener('pause', showButton);\n                        });\n                    };\n                    playerController.ExecuteOnAllPlayers(function(player) {\n                        return player.elements.container.addEventListener('pause', showButton);\n                    });\n                    hideButton();\n                };\n                for(var _iterator = carouselButtons[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop(_iterator, _step);\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally{\n                try {\n                    if (!_iteratorNormalCompletion && _iterator.return != null) {\n                        _iterator.return();\n                    }\n                } finally{\n                    if (_didIteratorError) {\n                        throw _iteratorError;\n                    }\n                }\n            }\n        };\n        playerController.ExecuteOnAllPlayers(function(player) {\n            player.elements.container.addEventListener('ended', stopOnEnd);\n            player.elements.container.addEventListener('playing', executeOnPlay);\n        });\n        playerController.StopAll();\n        playerController.HideAllControls();\n        var changeOverlayStatus = function() {\n            overlay.setAttribute('active', overlay.getAttribute('active') == 'false' ? enableOverlay(true) : enableOverlay(false));\n        };\n        changeOverlayStatus();\n        var DisablePlayOnDrag = function(ev) {\n            var CancelClick = function(ev1) {\n                ev1.stopPropagation();\n                window.removeEventListener('click', CancelClick, true);\n            };\n            window.addEventListener('click', CancelClick, true);\n        };\n        OverlayCarousel.instance.on('dragStart', DisablePlayOnDrag);\n        overlay.addEventListener('click', function CloseOverlay(ev) {\n            if (ev.target != this && !ev.target.classList.contains('icon-line-cross') && !ev.target.classList.contains('video-overlay-close')) {\n                return;\n            }\n            changeOverlayStatus();\n            overlay.removeEventListener('click', CloseOverlay);\n            OverlayCarousel.instance.select(0, false, true);\n            /* overlay.firstElementChild.removeEventListener('click',PreventParentClick);  */ playerController.PauseAll();\n            playerController.ExecuteOnAllPlayers(function(player) {\n                player.elements.container.removeEventListener('ended', stopOnEnd);\n                player.elements.container.removeEventListener('playing', executeOnPlay);\n            });\n            OverlayCarousel.instance.off('dragStart', DisablePlayOnDrag);\n        });\n        OverlayCarousel.instance.resize();\n    });\n};\n/* let searchButton = document.getElementById(\"top-search-trigger\");\r\nlet searchPanel = searchButton.closest(\".header-row\");\r\nsearchPanel.setAttribute('search-active',false);\r\n\r\nsearchButton.addEventListener('click', () => {\r\n    let typedOnSearchBar;\r\n    let searchBlur;\r\n    let searchInput = document.getElementById(\"main-search-bar\");\r\n    searchInput.setAttribute('empty', true);\r\n    if(searchPanel.hasAttribute(\"search-active\") && searchPanel.getAttribute('search-active') == \"false\"){\r\n        if(searchInput.value != '') searchInput.value = '';\r\n        searchPanel.setAttribute('search-active',true);\r\n        typedOnSearchBar = (ev) => {\r\n            if(ev.inputType != \"deleteContentBackward\" && !searchInput.value == ''){\r\n                searchInput.setAttribute('empty', false);\r\n            }\r\n            else if(ev.inputType == \"deleteContentBackward\" && searchInput.value == ''){\r\n                searchInput.setAttribute('empty', true);\r\n            }\r\n        }\r\n        searchBlur = (ev) => {\r\n            if(ev.target.id != \"main-search-bar\" && ev.target.id != \"close-search-bar\" ){\r\n                if (searchPanel.getAttribute('search-active') == \"true\") {\r\n                    searchPanel.setAttribute('search-active',false);\r\n                    document.removeEventListener('click', searchBlur);\r\n                    searchInput.removeEventListener('input', typedOnSearchBar);\r\n                }\r\n            }\r\n\r\n        }\r\n        searchInput.addEventListener('input', typedOnSearchBar);\r\n        document.addEventListener('click', searchBlur);\r\n        searchInput.focus();\r\n    }\r\n    else if (searchPanel.getAttribute('search-active') == \"true\") {\r\n        searchPanel.setAttribute('search-active',false);\r\n        searchInput.removeEventListener('input', typedOnSearchBar);\r\n        document.removeEventListener('click', searchBlur);\r\n    }\r\n}) */ /* Disabled search features */ // Update the contact form to the correct city, based on the button pressed.\nvar tabPanel = document.querySelector('.tab-pane');\nvar form = tabPanel.querySelector('form');\nvar tabsContainer = document.querySelector('#cityTabs');\nvar tabs = tabsContainer.querySelectorAll('a');\nvar tabState = {\n    current: ''\n};\ntabsContainer.addEventListener('OnTabFocusChange', function(ev) {\n    var newTab = ev.target.id;\n    if (tabState.current != newTab) {\n        var keys = Object.keys(tabState);\n        for(var i = 1; i < keys.length; i++){\n            var tab = keys[i];\n            if (tab != newTab && tabState[tab].node.classList.contains('active')) {\n                tabState[tab].node.classList.remove('active');\n                tabState[tab].isActive = false;\n            }\n        }\n        tabState[newTab].node.classList.add('active');\n        tabState[newTab].isActive = true;\n        tabState['current'] = newTab;\n    }\n});\nvar _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\ntry {\n    for(var _iterator = tabs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n        var tab = _step.value;\n        tabState[tab.id] = tab.classList.contains('active') ? (function() {\n            tabState['current'] = tab.id;\n            return {\n                isActive: true,\n                node: tab\n            };\n        })() : {\n            isActive: false,\n            node: tab\n        };\n        tab.addEventListener('click', function(ev) {\n            var cityName = ev.target.getAttribute('aria-controls');\n            var isActive = ev.target.classList.contains('active');\n            if (!isActive) {\n                /* form.setAttribute('fieldset','disabled') */ ev.target.dispatchEvent(new CustomEvent('OnTabFocusChange', {\n                    bubbles: true\n                }));\n                tabPanel.id = cityName;\n                tabPanel.setAttribute('aria-labelledby', ev.target.id);\n                tabPanel.classList.remove('show');\n                tabsContainer.setAttribute('activeTab', ev.target.id);\n                var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n                try {\n                    for(var _iterator1 = form.elements[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n                        var field = _step1.value;\n                        field.disabled = true;\n                        if (field.hasAttribute('required')) field.removeAttribute('required');\n                    }\n                } catch (err) {\n                    _didIteratorError1 = true;\n                    _iteratorError1 = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                            _iterator1.return();\n                        }\n                    } finally{\n                        if (_didIteratorError1) {\n                            throw _iteratorError1;\n                        }\n                    }\n                }\n                setTimeout(function() {\n                    var cityField = form.elements.namedItem('contato-form-city'); //Requesting the city field inside the form.\n                    var _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = undefined;\n                    try {\n                        for(var _iterator2 = form.elements[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true){\n                            var field = _step2.value;\n                            field.setCustomValidity('');\n                            field.removeAttribute('isvalid');\n                            field.disabled = false;\n                            field.value = '';\n                        }\n                    } catch (err) {\n                        _didIteratorError2 = true;\n                        _iteratorError2 = err;\n                    } finally{\n                        try {\n                            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                                _iterator2.return();\n                            }\n                        } finally{\n                            if (_didIteratorError2) {\n                                throw _iteratorError2;\n                            }\n                        }\n                    }\n                    cityField.value = cityName.charAt(0).toUpperCase() + cityName.slice(1); //Changing the first letter of the word to uppercase and mergin with the rest of the word.\n                    tabPanel.classList.add('show');\n                }, 300);\n            }\n        });\n    }\n} catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n} finally{\n    try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n        }\n    } finally{\n        if (_didIteratorError) {\n            throw _iteratorError;\n        }\n    }\n}\nvar menuIsOpen = false;\nvar executeOnMenuOpened = new MutationObserver(function(mutationList, observer) {\n    var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n    try {\n        for(var _iterator1 = mutationList[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n            var mutation = _step1.value;\n            if (mutation.type == 'attributes' && mutation.attributeName == 'class') {\n                if (mutation.target.classList.contains('primary-menu-open')) {\n                    if (menuIsOpen == false) {\n                        bodyScrollLock.disableBodyScroll(mutation.target);\n                        menuIsOpen = true;\n                    }\n                } else if (menuIsOpen == true) {\n                    bodyScrollLock.enableBodyScroll(mutation.target);\n                    document.getElementsByClassName('header-wrap-clone')[0].removeAttribute('style');\n                    menuIsOpen = false;\n                }\n            }\n        }\n    } catch (err) {\n        _didIteratorError1 = true;\n        _iteratorError1 = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                _iterator1.return();\n            }\n        } finally{\n            if (_didIteratorError1) {\n                throw _iteratorError1;\n            }\n        }\n    }\n});\nexecuteOnMenuOpened.observe(document.querySelector(\"body\"), {\n    attributes: true\n});\nvar fieldValidation = new FieldValidation();\nfieldValidation.ListenToField({\n    nodeList: document.querySelectorAll(\"input[id^='contato-form']\")\n});\nvar emailPlaceHolder = new CustomPlaceHolder({\n    Default: 'Seu email',\n    Custom: 'email@dominio.com',\n    Target: document.getElementById('contato-form-email'),\n    StartWithDefault: true\n}).OnFocus({\n    ReturnToDefault: true\n});\nvar calendarPlaceHolder = new CustomPlaceHolder({\n    Default: \"Data de Interesse\",\n    Custom: \"DD/MM/AAAA\",\n    Target: document.getElementById('contato-form-date'),\n    StartWithDefault: true\n}).OnFocus({\n    ReturnToDefault: true\n});\nvar phonePlaceHolder = new CustomPlaceHolder({\n    Default: \"Seu Telefone\",\n    Custom: '(DD) X XXXX-XXXX',\n    Target: document.getElementById('contato-form-phone'),\n    StartWithDefault: true\n}).OnFocus({\n    ReturnToDefault: true\n});\njQuery('.home-date').datepicker({\n    language: 'pt-BR',\n    autoclose: true,\n    startDate: \"tomorrow\",\n    endDate: \"+2m\"\n});\n/* testing.On('OnScrollDown',()=>{}); */ var perfilButtons = {\n};\nperfilButtons.curriculo = document.getElementById(\"curriculo-session\");\nperfilButtons.simposios = document.getElementById(\"simposio-session\");\nperfilButtons.publicacoes = document.getElementById(\"publicacoes-session\");\nvar enableSession = function(el) {\n    var activeButton = el.currentTarget;\n    var block = document.getElementsByClassName('perfil-container')[0];\n    var isMobile = document.documentElement.clientWidth <= 834;\n    if (!el.currentTarget.classList.contains('--active')) {\n        block.classList.add('--active');\n        for(var button in perfilButtons){\n            button = perfilButtons[button];\n            if (button.id != activeButton.id) {\n                if (!button.classList.contains('--inactive')) {\n                    button.classList.add('--inactive');\n                    if (isMobile) bodyScrollLock.enableBodyScroll(button);\n                }\n            } else {\n                if (button.classList.contains('--inactive')) {\n                    button.classList.remove('--inactive');\n                }\n                if (!button.classList.contains('--active')) {\n                    button.classList.add('--active');\n                    if (isMobile) bodyScrollLock.disableBodyScroll(button);\n                }\n            }\n        }\n    } else {\n        block.classList.remove('--active');\n        el.currentTarget.classList.remove('--active');\n        for(var button in perfilButtons){\n            button = perfilButtons[button];\n            button.classList.remove('--inactive');\n        }\n        if (document.body.classList.contains('--obscured')) {\n            document.body.classList.remove('--obscured');\n        }\n        if (isMobile) bodyScrollLock.clearAllBodyScrollLocks();\n    }\n    if (!document.body.classList.contains('--obscured')) {\n        if (isMobile) {\n            document.body.classList.add('--obscured');\n        }\n    }\n    if (isMobile) innerVisualHeight();\n};\nfor(var button in perfilButtons){\n    button = perfilButtons[button];\n    button.addEventListener('click', enableSession, true);\n}\n\n\n//# sourceURL=webpack://website/./src/js/Custom/customizations.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => module['default'] :
/******/ 				() => module;
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	// startup
/******/ 	// Load entry module
/******/ 	__webpack_require__("./src/js/App/app.js");
/******/ 	// This entry module used 'exports' so it can't be inlined
/******/ })()
;