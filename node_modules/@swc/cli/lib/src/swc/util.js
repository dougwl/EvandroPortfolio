"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.adjustRelative = exports.requireChokidar = exports.deleteDir = exports.compile = exports.transform = exports.addSourceMappingUrl = exports.isCompilableExtension = exports.readdirForCompilable = exports.readdir = exports.chmod = void 0;
const swc = __importStar(require("@swc/core"));
const fs_1 = __importDefault(require("fs"));
const fs_readdir_recursive_1 = __importDefault(require("fs-readdir-recursive"));
const includes_1 = __importDefault(require("lodash/includes"));
const path_1 = __importDefault(require("path"));
function chmod(src, dest) {
    fs_1.default.chmodSync(dest, fs_1.default.statSync(src).mode);
}
exports.chmod = chmod;
function readdir(dirname, includeDotfiles, filter) {
    return fs_readdir_recursive_1.default(
    // @ts-ignore
    dirname, 
    // @ts-ignore
    (filename, _index, currentDirectory) => {
        const stat = fs_1.default.statSync(path_1.default.join(currentDirectory, filename));
        if (stat.isDirectory())
            return true;
        return ((includeDotfiles || filename[0] !== ".") &&
            (!filter || filter(filename)));
    });
}
exports.readdir = readdir;
function readdirForCompilable(dirname, includeDotfiles, altExts) {
    return readdir(dirname, includeDotfiles, function (filename) {
        return isCompilableExtension(filename, altExts);
    });
}
exports.readdirForCompilable = readdirForCompilable;
/**
 * Test if a filename ends with a compilable extension.
 */
function isCompilableExtension(filename, altExts) {
    const exts = altExts || [".js", ".jsx", ".es6", ".es", ".mjs", ".ts", ".tsx"];
    const ext = path_1.default.extname(filename);
    return includes_1.default(exts, ext);
}
exports.isCompilableExtension = isCompilableExtension;
function addSourceMappingUrl(code, loc) {
    return code + "\n//# sourceMappingURL=" + path_1.default.basename(loc);
}
exports.addSourceMappingUrl = addSourceMappingUrl;
function transform(filename, code, opts, sync) {
    return __awaiter(this, void 0, void 0, function* () {
        opts = Object.assign({ filename }, opts);
        if (sync) {
            return swc.transformSync(code, opts);
        }
        return swc.transform(code, opts);
    });
}
exports.transform = transform;
function compile(filename, opts, sync) {
    return __awaiter(this, void 0, void 0, function* () {
        opts = Object.assign({}, opts);
        if (sync) {
            return swc.transformFileSync(filename, opts);
        }
        return swc.transformFile(filename, opts);
    });
}
exports.compile = compile;
function deleteDir(path) {
    if (fs_1.default.existsSync(path)) {
        fs_1.default.readdirSync(path).forEach(function (file) {
            const curPath = path + "/" + file;
            if (fs_1.default.lstatSync(curPath).isDirectory()) {
                // recurse
                deleteDir(curPath);
            }
            else {
                // delete file
                fs_1.default.unlinkSync(curPath);
            }
        });
        fs_1.default.rmdirSync(path);
    }
}
exports.deleteDir = deleteDir;
process.on("uncaughtException", function (err) {
    console.error(err);
    process.exit(1);
});
function requireChokidar() {
    try {
        return require("chokidar");
    }
    catch (err) {
        console.error("The optional dependency chokidar failed to install and is required for " +
            "--watch. Chokidar is likely not supported on your platform.");
        throw err;
    }
}
exports.requireChokidar = requireChokidar;
function adjustRelative(relative, keepFileExtension) {
    if (keepFileExtension) {
        return relative;
    }
    return relative.replace(/\.(\w*?)$/, "") + ".js";
}
exports.adjustRelative = adjustRelative;
