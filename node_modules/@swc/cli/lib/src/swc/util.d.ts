/// <reference types="node" />
import * as swc from "@swc/core";
import fs from "fs";
export declare function chmod(src: fs.PathLike, dest: fs.PathLike): void;
declare type ReaddirFilter = (filename: string) => boolean;
export declare function readdir(dirname: fs.PathLike, includeDotfiles: boolean, filter?: ReaddirFilter): string[];
export declare function readdirForCompilable(dirname: string, includeDotfiles: boolean, altExts?: Array<string>): string[];
/**
 * Test if a filename ends with a compilable extension.
 */
export declare function isCompilableExtension(filename: string, altExts?: Array<string>): boolean;
export declare function addSourceMappingUrl(code: string, loc: string): string;
export declare function transform(filename: string, code: string, opts: swc.Options, sync: boolean): Promise<swc.Output>;
export declare function compile(filename: string, opts: swc.Options, sync: boolean): Promise<swc.Output>;
export declare function deleteDir(path: fs.PathLike): void;
export declare function requireChokidar(): any;
export declare function adjustRelative(relative: string, keepFileExtension: boolean): string;
export {};
